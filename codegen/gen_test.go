package codegen

import (
	"fmt"
	"strings"
	"testing"

	"github.com/dave/jennifer/jen"
)

func TestXxx(t *testing.T) {
	gsdFile := jen.NewFile("estat")
	gsdFile.Comment("Code generated by github.com/psyark/estat/codegen; DO NOT EDIT.").Line()

	for _, name := range []string{"Class", "Note", "Value"} {
		addHelper(gsdFile, name)
	}

	addClassAccesor(gsdFile, "area")
	addClassAccesor(gsdFile, "time")
	for i := 1; i <= 15; i++ {
		addClassAccesor(gsdFile, fmt.Sprintf("cat%02d", i))
	}

	addValueAccesor(gsdFile, "area")
	addValueAccesor(gsdFile, "time")
	for i := 1; i <= 15; i++ {
		addValueAccesor(gsdFile, fmt.Sprintf("cat%02d", i))
	}

	if err := gsdFile.Save("../getstatsdata.gen.go"); err != nil {
		t.Fatal(err)
	}

	gslFile := jen.NewFile("estat")
	gslFile.Comment("Code generated by github.com/psyark/estat/codegen; DO NOT EDIT.").Line()

	for _, name := range []string{"TableInf"} {
		addHelper(gslFile, name)
	}

	if err := gslFile.Save("../getstatslist.gen.go"); err != nil {
		t.Fatal(err)
	}
}

func addHelper(f *jen.File, name string) {
	helperName := name + "Helper"

	f.Comment(fmt.Sprintf("%s は、%s の単一の値または配列を透過的にUnmarshal/Marshalするスライスです", helperName, name))

	f.Type().Id(helperName).Index().Id(name)

	f.Func().Params(jen.Id("c").Op("*").Id(helperName)).Id("UnmarshalJSON").Call(jen.Id("d").Index().Byte()).Error().Block(
		jen.If(jen.Id("d").Index(jen.Lit(0)).Op("==").LitRune('{').Block(
			jen.Op("*").Id("c").Op("=").Make(jen.Index().Id(name), jen.Lit(1)),
			jen.Return().Qual("encoding/json", "Unmarshal").Call(jen.Id("d"), jen.Op("&").Call(jen.Op("*").Id("c")).Index(jen.Lit(0))),
		).Else().Block(
			jen.Return().Qual("encoding/json", "Unmarshal").Call(jen.Id("d"), jen.Call(jen.Op("*").Index().Id(name)).Call(jen.Id("c"))),
		)),
	).Line()

	f.Func().Params(jen.Id("c").Id(helperName)).Id("MarshalJSON").Call().Call(jen.Index().Byte(), jen.Error()).Block(
		jen.If(jen.Id("len").Call(jen.Id("c")).Op("==").Lit(1).Block(
			jen.Return().Qual("encoding/json", "Marshal").Call(jen.Id("c").Index(jen.Lit(0))),
		).Else().Block(
			jen.Return().Qual("encoding/json", "Marshal").Call(jen.Index().Id(name).Call(jen.Id("c"))),
		)),
	).Line()
}

func addClassAccesor(f *jen.File, classID string) {
	funcName := strings.ToUpper(classID[0:1]) + classID[1:]

	f.Comment(fmt.Sprintf("%s は、IDが %q であるClassObjを返します", funcName, classID))
	f.Func().Params(jen.Id("c").Id("ClassInf")).Id(funcName).Params().Op("*").Id("ClassObj").Block(
		jen.Return().Id("c").Dot("GetClassObj").Call(jen.Lit(classID)),
	)
}

func addValueAccesor(f *jen.File, classID string) {
	propName := strings.ToUpper(classID[0:1]) + classID[1:]
	funcName := strings.ToUpper(classID[0:1]) + classID[1:] + "Class"

	f.Comment(fmt.Sprintf("%s は、このValueの %s に対応するClassを返します", funcName, propName))
	f.Func().Params(jen.Id("v").Id("Value")).Id(funcName).Params(jen.Id("c").Id("ClassInf")).Op("*").Id("Class").Block(
		jen.Return().Id("c").Dot("GetClassObj").Call(jen.Lit(classID)).Dot("GetClass").Call(jen.Id("v").Dot(propName)),
	)
}
