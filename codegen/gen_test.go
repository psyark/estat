package codegen

import (
	"fmt"
	"strings"
	"testing"

	"github.com/dave/jennifer/jen"
)

func TestXxx(t *testing.T) {
	gsdFile := jen.NewFile("estat")
	gsdFile.Comment("Code generated by github.com/psyark/estat/codegen; DO NOT EDIT.").Line()

	addClassAccesor(gsdFile, "area")
	addClassAccesor(gsdFile, "time")
	for i := 1; i <= 15; i++ {
		addClassAccesor(gsdFile, fmt.Sprintf("cat%02d", i))
	}

	addValueAccesor(gsdFile, "area")
	addValueAccesor(gsdFile, "time")
	for i := 1; i <= 15; i++ {
		addValueAccesor(gsdFile, fmt.Sprintf("cat%02d", i))
	}

	if err := gsdFile.Save("../getstatsdata.gen.go"); err != nil {
		t.Fatal(err)
	}
}

func addClassAccesor(f *jen.File, classID string) {
	funcName := strings.ToUpper(classID[0:1]) + classID[1:]

	f.Comment(fmt.Sprintf("%s は、IDが %q であるClassObjを返します", funcName, classID))
	f.Func().Params(jen.Id("c").Id("ClassInf")).Id(funcName).Params().Op("*").Id("ClassObj").Block(
		jen.Return().Id("c").Dot("GetClassObj").Call(jen.Lit(classID)),
	)
}

func addValueAccesor(f *jen.File, classID string) {
	propName := strings.ToUpper(classID[0:1]) + classID[1:]
	funcName := strings.ToUpper(classID[0:1]) + classID[1:] + "Class"

	f.Comment(fmt.Sprintf("%s は、このValueの %s に対応するClassを返します", funcName, propName))
	f.Func().Params(jen.Id("v").Id("Value")).Id(funcName).Params(jen.Id("c").Id("ClassInf")).Op("*").Id("Class").Block(
		jen.Return().Id("c").Dot("GetClassObj").Call(jen.Lit(classID)).Dot("GetClass").Call(jen.Id("v").Dot(propName)),
	)
}
